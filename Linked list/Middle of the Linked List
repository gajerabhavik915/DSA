(Java Solution)  (100% Time and 84.40% Memory efficient)


class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode mean = head;
        ListNode last = head;
        
        while (last != null && last.next != null){
            mean = mean.next;
            last = last.next.next;
        }
        return mean;
    }
}





(Python Solution)

class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        mean = head                                         # mean and last, both are two pointers of head
        last = head
        while last is not None and last.next is not None:   # loop will get execute untill, last pointer and last.next is exist.
            mean =mean.next                                 # mean will forward one step 
            last = last.next.next                           # last will forward two times at a time.
        
        return mean
