class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:    
        behind = ahead = head                                # here, behind and ahead both are pointers 
        while behind and ahead and ahead.next:               # while loop only execute untill behind, ahead and ahead.next will be present.
            behind = behind.next                             # here, ahead pointer will move forward one node faster than behind and after some rotation both will 
            ahead = ahead.next.next                            meet at comman node.
            if behind == ahead:                              # and when it becomes true. loop will stop to execute and return True.
                return True
        else:
            return False                                     # If both pointer can not meet, then it will return false.
