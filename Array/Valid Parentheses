#Hint - First, I will go through each and every parantheses, if any parenthese belongs to open (e.x.  {[(  ), i will transfer them in a separate list.
#      And for the remaining ( e.x. )}]  ) I will try to match same shape of parenthese in list, if it's found, I will remove it from list.
#      On the final step, if there is no element in list, given parenthese are valid. Otherwise not.
       
class Solution:
    def isValid(self, s: str) -> bool:
        # s1 = "{}[](]"
        # s2 = "[({})]"
        # s = ""
        list1 = []
        if len(s)%2 != 0:
            # if any given str has odd length, then indirectly it's not valid parenthese( e.x. {}(){  ) 
            return False
        else:
            for a in s:
                if a in ['[','{','(']:
                    list1.append(a)
                else:
                    if len(list1) == 0:
                        return False
                    else:
                        if a == '}' and list1[len(list1)-1] == '{':
                            list1.pop()
                        elif a == ']' and list1[len(list1)-1] == '[':
                            list1.pop()
                        elif a == ')' and list1[len(list1)-1] == '(':
                            list1.pop()
                        else:
                            return False
        if len(list1) == 0:
            return True
        else:
            return False
